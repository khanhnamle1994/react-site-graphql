Object.defineProperty(exports, "__esModule", {
  value: true
});

var _camelize = require('./camelize');

var _cssToObj = require('./cssToObj');

var _cssToObj2 = _interopRequireDefault(_cssToObj);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/* eslint-disable no-param-reassign */
//
// These visitors normalize the SVG into something React understands:
//

exports['default'] = function (t) {
  return {
    JSXAttribute: function () {
      function JSXAttribute(path) {
        if (t.isJSXNamespacedName(path.node.name)) {
          // converts
          // <svg xmlns:xlink="asdf">
          // to
          // <svg xmlnsXlink="asdf">
          path.node.name = t.jSXIdentifier((0, _camelize.namespaceToCamel)(path.node.name.namespace.name, path.node.name.name.name));
        } else if (t.isJSXIdentifier(path.node.name)) {
          // converts
          // <tag class="blah blah1"/>
          // to
          // <tag className="blah blah1"/>
          if (path.node.name.name === 'class') {
            path.node.name.name = 'className';
          }

          // converts
          // <tag style="text-align: center; width: 50px">
          // to
          // <tag style={{textAlign: 'center', width: '50px'}}>
          if (path.node.name.name === 'style') {
            (function () {
              var csso = (0, _cssToObj2['default'])(path.node.value.value);
              var properties = Object.keys(csso).map(function (prop) {
                return t.objectProperty(t.identifier((0, _camelize.hyphenToCamel)(prop)), t.stringLiteral(csso[prop]));
              });
              path.node.value = t.jSXExpressionContainer(t.objectExpression(properties));
            })();
          }

          // converts
          // <svg stroke-width="5">
          // to
          // <svg strokeWidth="5">
          path.node.name.name = (0, _camelize.hyphenToCamel)(path.node.name.name);
        }
      }

      return JSXAttribute;
    }(),


    // converts
    // <svg>
    // to
    // <svg {...props}>
    // after passing through attributes visitors
    JSXOpeningElement: function () {
      function JSXOpeningElement(path) {
        if (path.node.name.name.toLowerCase() === 'svg') {
          // add spread props
          path.node.attributes.push(t.jSXSpreadAttribute(t.identifier('props')));
        }
      }

      return JSXOpeningElement;
    }()
  };
};
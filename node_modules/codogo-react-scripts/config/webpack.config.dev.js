"use strict";

const autoprefixer = require("autoprefixer");
const webpack = require("webpack");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const CaseSensitivePathsPlugin = require("case-sensitive-paths-webpack-plugin");
const InterpolateHtmlPlugin = require("react-dev-utils/InterpolateHtmlPlugin");
const WatchMissingNodeModulesPlugin = require("react-dev-utils/WatchMissingNodeModulesPlugin");
const getClientEnvironment = require("./env");
const paths = require("./paths");

const publicPath = "/";
const publicUrl = "";
const env = getClientEnvironment(publicUrl);

module.exports = {
	devtool: "cheap-module-source-map",
	entry: [
		require.resolve("react-dev-utils/webpackHotDevClient"),
		require.resolve("./polyfills"),
		paths.appIndexJs,
	],
	output: {
		path: paths.appBuild,
		pathinfo: true,
		filename: "static/js/bundle.js",
		publicPath: publicPath,
	},
	resolve: {
		modules: [
			"node_modules",
			paths.appNodeModules,
			paths.appPath,
		].concat(paths.nodePaths),

		extensions: [".js", ".json", ".jsx"],
		alias: {
			"react-native": "react-native-web",
		},
	},
	resolveLoader: {
		modules: [
			paths.ownNodeModules,
			paths.appNodeModules,
		],
	},
	module: {
		rules: [
			{ parser: { requireEnsure: false } },
			{
				test: /\.(js|jsx)$/,
				enforce: "pre",
				use: [
					{
						options: {
							baseConfig: {
								extends: ["codogo"],
							},
							useEslintrc: false,
						},
						loader: "eslint-loader",
					},
				],
				include: paths.appSrc,
			},

			{
				exclude: [
					/\.html$/,
					/\.(js|jsx)$/,
					/\.css$/,
					/\.json$/,
					/\.bmp$/,
					/\.gif$/,
					/\.jpe?g$/,
					/\.png$/,
					/\.(graphql|gql)$/,
				],
				loader: "file-loader",
				options: {
					name: "static/media/[name].[hash:8].[ext]",
				},
			},

			{
				test: [/\.bmp$/, /\.gif$/, /\.jpe?g$/, /\.png$/],
				loader: "url-loader",
				options: {
					limit: 10000,
					name: "static/media/[name].[hash:8].[ext]",
				},
			},

			{
				test: /\.(graphql|gql)$/,
				loader: "graphql-tag/loader",
			},

			{
				test: /\.(js|jsx)$/,
				include: paths.appSrc,
				loader: "babel-loader",
				options: {
					babelrc: false,
					presets: [
						require.resolve("babel-preset-codogo"),
						[
							require.resolve("babel-preset-env"),
							{
								"modules": false,
							},
						],
					],
					cacheDirectory: true,
				},
			},
			// ** STOP ** Are you adding a new loader?
			// Remember to add the new extension(s) to the "url" loader exclusion list.
		],
	},
	plugins: [
		new InterpolateHtmlPlugin(env.raw),
		new webpack.DefinePlugin(env.stringified),
		new webpack.HotModuleReplacementPlugin(),
		new CaseSensitivePathsPlugin(),
		new WatchMissingNodeModulesPlugin(paths.appNodeModules),

		new webpack.ProvidePlugin({
			R: "ramda",
			React: "react",
			Consts: paths.consts,
		}),

		new HtmlWebpackPlugin({
			inject: true,
			template: paths.appHtml,
		}),
	],
	node: {
		fs: "empty",
		net: "empty",
		tls: "empty",
	},
	performance: {
		hints: false,
	},
};

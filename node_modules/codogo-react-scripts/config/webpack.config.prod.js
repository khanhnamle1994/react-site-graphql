"use strict";

const autoprefixer = require("autoprefixer");
const webpack = require("webpack");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const ExtractTextPlugin = require("extract-text-webpack-plugin");
const ManifestPlugin = require("webpack-manifest-plugin");
const InterpolateHtmlPlugin = require("react-dev-utils/InterpolateHtmlPlugin");
const paths = require("./paths");
const getClientEnvironment = require("./env");
const BundleAnalyzerPlugin = require("webpack-bundle-analyzer").BundleAnalyzerPlugin;

const publicPath = paths.servedPath;
const shouldUseRelativeAssetPaths = publicPath === "./";
const publicUrl = publicPath.slice(0, -1);
const env = getClientEnvironment(publicUrl);

if (env.stringified["process.env"].NODE_ENV !== '"production"') {
	throw new Error("Production builds must have NODE_ENV=production.");
}

const cssFilename = "static/css/[name].[contenthash:8].css";

const extractTextPluginOptions = shouldUseRelativeAssetPaths
	? // Making sure that the publicPath goes back to to build folder.
	{ publicPath: Array(cssFilename.split("/").length).join("../") }
	: {};

const onlyIfModuleUsed = (vendor) => (module) =>{
	try{
		require.resolve(module);
		console.log("[" + vendor + "]: " + module );
		return true;
	}
	catch(e){
		console.log("[" + vendor + "]: " + module + " not used");
		return false;
	}
};

const removeUndefined = (x) => {
	const y = JSON.parse(JSON.stringify(x));
	return y;
}

const undefinedIfEmpty = (vendor, a) => {
	const x = a.filter(onlyIfModuleUsed(vendor));
	console.log('');
	return x.length ? x : undefined
};

const vendorModules = undefinedIfEmpty(
	"vendor",
	[
		"auth0-js",
		"auth0-lock",
		"immutable",
		"polished",
		"ramda",
		"styled-components",
	]
);

const codogoModules = undefinedIfEmpty(
	"codogo", 
	[
		"codogo-react-widgets",
	]
);

const reactAndApolloModules = undefinedIfEmpty(
	"reactAndApollo",
	[
		"apollo-client",
		"react",
		"react-apollo",
		"react-dom",
	]
);

const probablyConstantModules = undefinedIfEmpty(
	"constant",
	[
		"jwt-decode",
		"moment",
		"autobind-decorator",
		"whatwg-fetch",
	]
);

module.exports = {
	bail: true,
	devtool: "source-map",

	entry: removeUndefined({
		main: [
			paths.appIndexJs
		],
		vendor: vendorModules,
		vendorCodogo: codogoModules,
		vendorReactApollo: reactAndApolloModules,
		vendorConstant: probablyConstantModules,
	}),

	output: {
		path: paths.appBuild,
		filename: "static/js/[name].[chunkhash:8].js",
		chunkFilename: "static/js/[name].[chunkhash:8].chunk.js",
		publicPath: publicPath,
	},

	resolve: {
		modules: [
			"node_modules",
			paths.appNodeModules,
			paths.appPath,
		].concat(paths.nodePaths),

		extensions: [".js", ".json", ".jsx"],
		alias: {
			"react-native": "react-native-web",
		},
	},

	resolveLoader: {
		modules: [
			paths.ownNodeModules,
			paths.appNodeModules,
		],
	},

	module: {
		rules: [
			{ parser: { requireEnsure: false } },
			{
				test: /\.(js|jsx)$/,
				enforce: "pre",
				use: [
					{
						options: {
							baseConfig: {
								extends: ["codogo"],
							},
							useEslintrc: false,
						},
						loader: "eslint-loader",
					},
				],
				include: paths.appSrc,
			},

			{
				exclude: [
					/\.html$/,
					/\.(js|jsx)$/,
					/\.css$/,
					/\.json$/,
					/\.bmp$/,
					/\.gif$/,
					/\.jpe?g$/,
					/\.png$/,
					/\.(graphql|gql)$/,
				],
				loader: "file-loader",
				options: {
					name: "static/media/[name].[hash:8].[ext]",
				},
			},

			{
				test: [/\.bmp$/, /\.gif$/, /\.jpe?g$/, /\.png$/],
				loader: "url-loader",
				options: {
					limit: 10000,
					name: "static/media/[name].[hash:8].[ext]",
				},
			},

			{
				test: /\.(graphql|gql)$/,
				exclude: /node_modules/,
				loader: "graphql-tag/loader",
			},

			{
				test: /\.(js|jsx)$/,
				include: paths.appSrc,
				loader: "babel-loader",
				options: {
					babelrc: false,
					presets: [
						require.resolve("babel-preset-codogo"),
						[
							require.resolve("babel-preset-env"),
							{
								"modules": false,
							},
						],
					],
				},
			},
		],
	},
	plugins: [
		new ExtractTextPlugin({ filename: cssFilename, }),
		new ManifestPlugin({ fileName: "asset-manifest.json", }),
		new InterpolateHtmlPlugin(env.raw),
		new webpack.DefinePlugin(env.stringified),

		new BundleAnalyzerPlugin({
			analyzerMode: "static",
			openAnalyzer: false,
		}),

		new webpack.optimize.CommonsChunkPlugin({
			names: [
				"vendor",
				"vendorCodogo",
				"vendorReactApollo",
				"vendorConstant",
				"manifest",
			],
			minChunks: 2,
		}),

		new webpack.ProvidePlugin({
			R: "ramda",
			React: "react",
			Consts: paths.consts,
		}),

		new HtmlWebpackPlugin({
			inject: true,
			template: paths.appHtml,
			minify: {
				removeComments: true,
				collapseWhitespace: true,
				removeRedundantAttributes: true,
				useShortDoctype: true,
				removeEmptyAttributes: true,
				removeStyleLinkTypeAttributes: true,
				keepClosingSlash: true,
				minifyJS: true,
				minifyCSS: true,
				minifyURLs: true,
			},
		}),

		new webpack.optimize.UglifyJsPlugin({
			compress: {
				screw_ie8: true, // React doesn"t support IE8
				warnings: false,
			},
			mangle: {
				screw_ie8: true,
			},
			output: {
				comments: false,
				screw_ie8: true,
			},
			sourceMap: true,
		}),
	],
	node: {
		fs: "empty",
		net: "empty",
		tls: "empty",
	},
};
